name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  RUST_BACKTRACE: 1
jobs:
  test:
    name: Test ${{ matrix.target }}
    strategy:
      fail-fast: true
      matrix:
        include:
          #- { target: x86_64-pc-windows-msvc, os: windows-latest }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest }
          #- { target: x86_64-apple-darwin, os: macos-latest }
          #- {
              #target: x86_64-pc-windows-gnu,
              #os: windows-latest,
              #host: -x86_64-pc-windows-gnu,
            #}

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      # This has a matcher for test panics, so we use it even though elsewhere
      # we use actions-rs/toolchain.
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: stable${{ matrix.host }}
          targets: ${{ matrix.target }}
          components: 'rustfmt, clippy'
      - run: cargo fmt --all -- --check
      - run: cargo clippy --all-targets --workspace --features bundled
      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          # Intentionally omit time feature until we're on time 0.3, at which
          # point it should be added to `bundled-full`.
          args: '--features "bundled"'
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1

  sanitizer:
    name: Address Sanitizer
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Need nightly rust.
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: nightly
          components: rust-src
      - name: Tests with asan
        env:
          RUSTFLAGS: -Zsanitizer=address
          RUSTDOCFLAGS: -Zsanitizer=address
          ASAN_OPTIONS: "detect_stack_use_after_return=1:detect_leaks=1"
          # Work around https://github.com/rust-lang/rust/issues/59125 by
          # disabling backtraces. In an ideal world we'd probably suppress the
          # leak sanitization, but we don't care about backtraces here, so long
          # as the other tests have them.
          RUST_BACKTRACE: "0"
        run: cargo -Z build-std test --features 'bundled' --target x86_64-unknown-linux-gnu
